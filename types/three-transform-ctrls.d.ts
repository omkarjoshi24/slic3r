export = index;
declare class index {
  constructor(camera: any, domElement: any);
  visible: any;
  dispose: any;
  attach: any;
  detach: any;
  updateMatrixWorld(force: any): void;
  pointerHover: any;
  pointerDown: any;
  pointerMove: any;
  pointerUp: any;
  getMode: any;
  setMode: any;
  setTranslationSnap: any;
  setRotationSnap: any;
  setSize: any;
  setSpace: any;
  update: any;
  add(object: any, ...args: any[]): any;
  addEventListener(type: any, listener: any): void;
  applyMatrix(matrix: any): void;
  applyQuaternion(q: any): any;
  clone(recursive: any): any;
  copy(source: any, recursive: any): any;
  dispatchEvent(event: any): void;
  getChildByName(name: any): any;
  getObjectById(id: any): any;
  getObjectByName(name: any): any;
  getObjectByProperty(name: any, value: any): any;
  getWorldDirection(target: any): any;
  getWorldPosition(target: any): any;
  getWorldQuaternion(target: any): any;
  getWorldRotation(): void;
  getWorldScale(target: any): any;
  hasEventListener(type: any, listener: any): any;
  localToWorld(vector: any): any;
  lookAt(x: any, y: any, z: any): void;
  onAfterRender(): void;
  onBeforeRender(): void;
  raycast(): void;
  remove(object: any, ...args: any[]): any;
  removeEventListener(type: any, listener: any): void;
  renderDepth(): void;
  rotateOnAxis(axis: any, angle: any): any;
  rotateOnWorldAxis(axis: any, angle: any): any;
  rotateX(angle: any): any;
  rotateY(angle: any): any;
  rotateZ(angle: any): any;
  setRotationFromAxisAngle(axis: any, angle: any): void;
  setRotationFromEuler(euler: any): void;
  setRotationFromMatrix(m: any): void;
  setRotationFromQuaternion(q: any): void;
  toJSON(meta: any): any;
  translate(distance: any, axis: any): any;
  translateOnAxis(axis: any, distance: any): any;
  translateX(distance: any): any;
  translateY(distance: any): any;
  translateZ(distance: any): any;
  traverse(callback: any): void;
  traverseAncestors(callback: any): void;
  traverseVisible(callback: any): void;
  updateMatrix(): void;
  updateWorldMatrix(updateParents: any, updateChildren: any): void;
  worldToLocal(vector: any): any;
}
